// Pipe{{.}}Fork returns two channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func Pipe{{.}}Fork(inp <-chan {{.Dot}}) (out1, out2 <-chan {{.Dot}}) {
	cha1 := make(chan {{.Dot}})
	cha2 := make(chan {{.Dot}})
	go func(out1, out2 chan<- {{.Dot}}, inp <-chan {{.Dot}}) {
		defer close(out1)
		defer close(out2)
		for i := range inp {
			out1 <- i
			out2 <- i
		}
	}(cha1, cha2, inp)
	return cha1, cha2
}
