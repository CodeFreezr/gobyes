// Pipe{{.}}Fork returns two channels to receive every result of inp before close.
//  Note: Yes, it is a VERY simple fanout - but sometimes all You need.
func Pipe{{.}}Fork(inp <-chan {{.Dot}}) (chan {{.Dot}}, chan {{.Dot}}) {
	out1 := make(chan {{.Dot}})
	out2 := make(chan {{.Dot}})
	go func() {
		defer close(out1)
		defer close(out2)
		for i := range inp {
			out1 <- i
			out2 <- i
		}
	}()
	return out1, out2
}
